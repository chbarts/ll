	.file	"dc.c"
	.intel_syntax noprefix
# GNU C (Ubuntu 4.3.2-1ubuntu12) version 4.3.2 (x86_64-linux-gnu)
#	compiled by GNU C version 4.3.2, GMP version 4.2.2, MPFR version 2.3.2.
# GGC heuristics: --param ggc-min-expand=97 --param ggc-min-heapsize=126954
# options passed:  dc.c -D_FORTIFY_SOURCE=2 -masm=intel -mtune=generic
# -auxbase-strip dc.vasm -O3 -fverbose-asm -fstack-protector
# options enabled:  -falign-loops -fargument-alias
# -fasynchronous-unwind-tables -fauto-inc-dec -fbranch-count-reg
# -fcaller-saves -fcommon -fcprop-registers -fcrossjumping
# -fcse-follow-jumps -fdefer-pop -fdelete-null-pointer-checks
# -fearly-inlining -feliminate-unused-debug-types -fexpensive-optimizations
# -fforward-propagate -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm
# -fguess-branch-probability -fident -fif-conversion -fif-conversion2
# -finline-functions -finline-functions-called-once
# -finline-small-functions -fipa-pure-const -fipa-reference -fivopts
# -fkeep-static-consts -fleading-underscore -fmath-errno -fmerge-constants
# -fmerge-debug-strings -fmove-loop-invariants -fomit-frame-pointer
# -foptimize-register-move -foptimize-sibling-calls -fpeephole -fpeephole2
# -fpredictive-commoning -freg-struct-return -fregmove -freorder-blocks
# -freorder-functions -frerun-cse-after-loop -fsched-interblock
# -fsched-spec -fsched-stalled-insns-dep -fschedule-insns2 -fsigned-zeros
# -fsplit-ivs-in-unroller -fsplit-wide-types -fstack-protector
# -fstrict-aliasing -fstrict-overflow -fthread-jumps -ftoplevel-reorder
# -ftrapping-math -ftree-ccp -ftree-ch -ftree-copy-prop -ftree-copyrename
# -ftree-cselim -ftree-dce -ftree-dominator-opts -ftree-dse -ftree-fre
# -ftree-loop-im -ftree-loop-ivcanon -ftree-loop-optimize
# -ftree-parallelize-loops= -ftree-pre -ftree-reassoc -ftree-salias
# -ftree-scev-cprop -ftree-sink -ftree-sra -ftree-store-ccp -ftree-ter
# -ftree-vect-loop-version -ftree-vectorize -ftree-vrp -funit-at-a-time
# -funswitch-loops -funwind-tables -fvect-cost-model -fverbose-asm
# -fzero-initialized-in-bss -m128bit-long-double -m64 -m80387
# -maccumulate-outgoing-args -malign-stringops -mfancy-math-387
# -mfp-ret-in-387 -mfused-madd -mglibc -mieee-fp -mmmx -mno-sse4
# -mpush-args -mred-zone -msse -msse2 -mtls-direct-seg-refs

# Compiler executable checksum: cd16075ebb6b42bb54bf2dfdb85f5098

	.section	.rodata.str1.1,"aMS",@progbits,1
.LC0:
	.string	"rot: stack too shallow\n"
	.text
	.p2align 4,,15
.globl rot
	.type	rot, @function
rot:
.LFB48:
	test	rdi, rdi	# tos
	push	rbx	#
.LCFI0:
	mov	rbx, rdi	# tos, tos
	je	.L2	#,
	mov	rdx, QWORD PTR [rdi+16]	# D.3148, <variable>.nxt
	test	rdx, rdx	# D.3148
	je	.L3	#,
	mov	rdi, QWORD PTR [rdx+16]	# nxt2, <variable>.nxt
	test	rdi, rdi	# nxt2
	je	.L3	#,
	mov	rax, QWORD PTR [rdi+16]	# <variable>.nxt, <variable>.nxt
	mov	QWORD PTR [rdx+16], rax	# <variable>.nxt, <variable>.nxt
	mov	QWORD PTR [rdi+16], rbx	# <variable>.nxt, tos
	mov	QWORD PTR [rbx+16], rdx	# <variable>.nxt, D.3148
	mov	rbx, rdi	# tos, nxt2
.L2:
	mov	rax, rbx	#, tos
	pop	rbx	#
	ret
	.p2align 4,,10
	.p2align 3
.L3:
	mov	rcx, QWORD PTR stderr[rip]	#, stderr
	mov	edx, 23	#,
	mov	esi, 1	#,
	mov	edi, OFFSET FLAT:.LC0	#,
	call	fwrite	#
	mov	rax, rbx	#, tos
	pop	rbx	#
	ret
.LFE48:
	.size	rot, .-rot
	.section	.rodata.str1.1
.LC1:
	.string	"swap: stack too shallow\n"
	.text
	.p2align 4,,15
.globl swap
	.type	swap, @function
swap:
.LFB47:
	xor	edx, edx	# tos.76
	test	rdi, rdi	# tos
	push	rbx	#
.LCFI1:
	mov	rbx, rdi	# tos, tos
	je	.L9	#,
	mov	rdx, QWORD PTR [rdi+16]	# tos.76, <variable>.nxt
	test	rdx, rdx	# tos.76
	je	.L12	#,
	mov	rax, QWORD PTR [rdx+16]	# <variable>.nxt, <variable>.nxt
	mov	QWORD PTR [rdi+16], rax	# <variable>.nxt, <variable>.nxt
	mov	QWORD PTR [rdx+16], rdi	# <variable>.nxt, tos
.L9:
	mov	rax, rdx	#, tos.76
	pop	rbx	#
	ret
	.p2align 4,,10
	.p2align 3
.L12:
	mov	rcx, QWORD PTR stderr[rip]	#, stderr
	mov	dl, 24	#,
	mov	esi, 1	#,
	mov	edi, OFFSET FLAT:.LC1	#,
	call	fwrite	#
	mov	rdx, rbx	# tos.76, tos
	jmp	.L9	#
.LFE47:
	.size	swap, .-swap
	.section	.rodata.str1.1
.LC2:
	.string	"neg: stack too shallow\n"
	.text
	.p2align 4,,15
.globl neg
	.type	neg, @function
neg:
.LFB43:
	test	rdi, rdi	# tos
	push	rbx	#
.LCFI2:
	mov	rbx, rdi	# tos, tos
	je	.L17	#,
	mov	rax, QWORD PTR [rdi+8]	# D.3106, <variable>.data
	movsd	xmm0, QWORD PTR .LC3[rip]	# tmp63,
	movsd	xmm1, QWORD PTR [rax]	# tmp61,* D.3106
	xorpd	xmm1, xmm0	# tmp61, tmp63
	movsd	QWORD PTR [rax], xmm1	#* D.3106, tmp61
.L15:
	mov	rax, rbx	#, tos
	pop	rbx	#
	ret
	.p2align 4,,10
	.p2align 3
.L17:
	mov	rcx, QWORD PTR stderr[rip]	#, stderr
	mov	edx, 23	#,
	mov	esi, 1	#,
	mov	edi, OFFSET FLAT:.LC2	#,
	call	fwrite	#
	jmp	.L15	#
.LFE43:
	.size	neg, .-neg
	.p2align 4,,15
.globl drop
	.type	drop, @function
drop:
.LFB45:
	mov	QWORD PTR [rsp-16], rbx	#,
.LCFI3:
	mov	QWORD PTR [rsp-8], rbp	#,
.LCFI4:
	sub	rsp, 24	#,
.LCFI5:
	xor	ebp, ebp	# nxt
	test	rdi, rdi	# tos
	mov	rbx, rdi	# tos, tos
	je	.L20	#,
	mov	rbp, QWORD PTR [rdi+16]	# nxt, <variable>.nxt
	mov	rdi, QWORD PTR [rdi+8]	# <variable>.data, <variable>.data
	call	free	#
	mov	rdi, rbx	#, tos
	call	free	#
.L20:
	mov	rax, rbp	#, nxt
	mov	rbx, QWORD PTR [rsp+8]	#,
	mov	rbp, QWORD PTR [rsp+16]	#,
	add	rsp, 24	#,
	ret
.LFE45:
	.size	drop, .-drop
	.section	.rodata.str1.1
.LC4:
	.string	"div: stack too shallow\n"
.LC6:
	.string	"div: divide by zero\n"
	.text
	.p2align 4,,15
.globl ddiv
	.type	ddiv, @function
ddiv:
.LFB42:
	mov	QWORD PTR [rsp-16], rbx	#,
.LCFI6:
	mov	QWORD PTR [rsp-8], rbp	#,
.LCFI7:
	sub	rsp, 24	#,
.LCFI8:
	test	rdi, rdi	# tos
	mov	rbx, rdi	# tos, tos
	je	.L23	#,
	mov	rbp, QWORD PTR [rdi+16]	# tos.140, <variable>.nxt
	test	rbp, rbp	# tos.140
	je	.L23	#,
	mov	rdi, QWORD PTR [rdi+8]	# D.3093, <variable>.data
	movsd	xmm1, QWORD PTR [rdi]	# D.3095,* D.3093
	ucomisd	xmm1, QWORD PTR .LC5[rip]	# D.3095,
	je	.L31	#,
.L30:
	mov	rax, QWORD PTR [rbp+8]	# D.3097, <variable>.data
	movsd	xmm0, QWORD PTR [rax]	# tmp65,* D.3097
	divsd	xmm0, xmm1	# tmp65, D.3095
	movsd	QWORD PTR [rax], xmm0	#* D.3097, tmp65
	call	free	#
	mov	rdi, rbx	#, tos
	mov	rbx, rbp	# tos, tos.140
	call	free	#
.L25:
	mov	rax, rbx	#, tos
	mov	rbp, QWORD PTR [rsp+16]	#,
	mov	rbx, QWORD PTR [rsp+8]	#,
	add	rsp, 24	#,
	ret
	.p2align 4,,10
	.p2align 3
.L31:
	jp	.L30	#,
	mov	rcx, QWORD PTR stderr[rip]	#, stderr
	mov	edx, 20	#,
	mov	esi, 1	#,
	mov	edi, OFFSET FLAT:.LC6	#,
	call	fwrite	#
	jmp	.L25	#
	.p2align 4,,10
	.p2align 3
.L23:
	mov	rcx, QWORD PTR stderr[rip]	#, stderr
	mov	edx, 23	#,
	mov	esi, 1	#,
	mov	edi, OFFSET FLAT:.LC4	#,
	call	fwrite	#
	jmp	.L25	#
.LFE42:
	.size	ddiv, .-ddiv
	.section	.rodata.str1.1
.LC7:
	.string	"mul: stack too shallow\n"
	.text
	.p2align 4,,15
.globl mul
	.type	mul, @function
mul:
.LFB41:
	mov	QWORD PTR [rsp-8], rbp	#,
.LCFI9:
	mov	QWORD PTR [rsp-16], rbx	#,
.LCFI10:
	sub	rsp, 24	#,
.LCFI11:
	test	rdi, rdi	# tos
	mov	rbp, rdi	# tos, tos
	je	.L33	#,
	mov	rbx, QWORD PTR [rdi+16]	# tos.167, <variable>.nxt
	test	rbx, rbx	# tos.167
	je	.L33	#,
	mov	rax, QWORD PTR [rbx+8]	# D.3078, <variable>.data
	mov	rdi, QWORD PTR [rdi+8]	# D.3080, <variable>.data
	movsd	xmm0, QWORD PTR [rax]	# tmp63,* D.3078
	mulsd	xmm0, QWORD PTR [rdi]	# tmp63,* D.3080
	movsd	QWORD PTR [rax], xmm0	#* D.3078, tmp63
	call	free	#
	mov	rdi, rbp	#, tos
	call	free	#
.L35:
	mov	rax, rbx	#, tos.167
	mov	rbp, QWORD PTR [rsp+16]	#,
	mov	rbx, QWORD PTR [rsp+8]	#,
	add	rsp, 24	#,
	ret
	.p2align 4,,10
	.p2align 3
.L33:
	mov	rcx, QWORD PTR stderr[rip]	#, stderr
	mov	edx, 23	#,
	mov	esi, 1	#,
	mov	edi, OFFSET FLAT:.LC7	#,
	mov	rbx, rbp	# tos.167, tos
	call	fwrite	#
	jmp	.L35	#
.LFE41:
	.size	mul, .-mul
	.section	.rodata.str1.1
.LC8:
	.string	"sub: stack too shallow\n"
	.text
	.p2align 4,,15
.globl sub
	.type	sub, @function
sub:
.LFB40:
	mov	QWORD PTR [rsp-8], rbp	#,
.LCFI12:
	mov	QWORD PTR [rsp-16], rbx	#,
.LCFI13:
	sub	rsp, 24	#,
.LCFI14:
	test	rdi, rdi	# tos
	mov	rbp, rdi	# tos, tos
	je	.L38	#,
	mov	rbx, QWORD PTR [rdi+16]	# tos.193, <variable>.nxt
	test	rbx, rbx	# tos.193
	je	.L38	#,
	mov	rax, QWORD PTR [rbx+8]	# D.3062, <variable>.data
	mov	rdi, QWORD PTR [rdi+8]	# D.3064, <variable>.data
	movsd	xmm0, QWORD PTR [rax]	# tmp63,* D.3062
	subsd	xmm0, QWORD PTR [rdi]	# tmp63,* D.3064
	movsd	QWORD PTR [rax], xmm0	#* D.3062, tmp63
	call	free	#
	mov	rdi, rbp	#, tos
	call	free	#
.L40:
	mov	rax, rbx	#, tos.193
	mov	rbp, QWORD PTR [rsp+16]	#,
	mov	rbx, QWORD PTR [rsp+8]	#,
	add	rsp, 24	#,
	ret
	.p2align 4,,10
	.p2align 3
.L38:
	mov	rcx, QWORD PTR stderr[rip]	#, stderr
	mov	edx, 23	#,
	mov	esi, 1	#,
	mov	edi, OFFSET FLAT:.LC8	#,
	mov	rbx, rbp	# tos.193, tos
	call	fwrite	#
	jmp	.L40	#
.LFE40:
	.size	sub, .-sub
	.section	.rodata.str1.1
.LC9:
	.string	"add: stack too shallow\n"
	.text
	.p2align 4,,15
.globl add
	.type	add, @function
add:
.LFB39:
	mov	QWORD PTR [rsp-8], rbp	#,
.LCFI15:
	mov	QWORD PTR [rsp-16], rbx	#,
.LCFI16:
	sub	rsp, 24	#,
.LCFI17:
	test	rdi, rdi	# tos
	mov	rbp, rdi	# tos, tos
	je	.L43	#,
	mov	rbx, QWORD PTR [rdi+16]	# tos.219, <variable>.nxt
	test	rbx, rbx	# tos.219
	je	.L43	#,
	mov	rax, QWORD PTR [rbx+8]	# D.3046, <variable>.data
	mov	rdi, QWORD PTR [rdi+8]	# D.3048, <variable>.data
	movsd	xmm0, QWORD PTR [rax]	# tmp63,* D.3046
	addsd	xmm0, QWORD PTR [rdi]	# tmp63,* D.3048
	movsd	QWORD PTR [rax], xmm0	#* D.3046, tmp63
	call	free	#
	mov	rdi, rbp	#, tos
	call	free	#
.L45:
	mov	rax, rbx	#, tos.219
	mov	rbp, QWORD PTR [rsp+16]	#,
	mov	rbx, QWORD PTR [rsp+8]	#,
	add	rsp, 24	#,
	ret
	.p2align 4,,10
	.p2align 3
.L43:
	mov	rcx, QWORD PTR stderr[rip]	#, stderr
	mov	edx, 23	#,
	mov	esi, 1	#,
	mov	edi, OFFSET FLAT:.LC9	#,
	mov	rbx, rbp	# tos.219, tos
	call	fwrite	#
	jmp	.L45	#
.LFE39:
	.size	add, .-add
	.section	.rodata.str1.1
.LC10:
	.string	"%lg\n"
	.text
	.p2align 4,,15
.globl print_stack
	.type	print_stack, @function
print_stack:
.LFB44:
	test	rdi, rdi	# tos
	push	rbx	#
.LCFI18:
	mov	rbx, rdi	# tos, tos
	je	.L50	#,
	.p2align 4,,10
	.p2align 3
.L51:
	mov	rax, QWORD PTR [rbx+8]	# <variable>.data, <variable>.data
	mov	esi, OFFSET FLAT:.LC10	#,
	mov	edi, 1	#,
	movsd	xmm0, QWORD PTR [rax]	#,* <variable>.data
	mov	eax, 1	#,
	call	__printf_chk	#
	mov	rbx, QWORD PTR [rbx+16]	# tos, <variable>.nxt
	test	rbx, rbx	# tos
	jne	.L51	#,
.L50:
	pop	rbx	#
	ret
.LFE44:
	.size	print_stack, .-print_stack
	.section	.rodata.str1.1
.LC11:
	.string	"stack die, everybody cry\n"
	.text
	.p2align 4,,15
.globl push
	.type	push, @function
push:
.LFB38:
	push	rbx	#
.LCFI19:
	mov	rbx, rdi	# tos, tos
	mov	edi, 8	#,
	sub	rsp, 16	#,
.LCFI20:
	movsd	QWORD PTR [rsp+8], xmm0	# num, num
	call	malloc	#
	test	rax, rax	# tmp64
	je	.L57	#,
	movsd	xmm0, QWORD PTR [rsp+8]	#, num
	mov	rdx, rbx	#, tos
	mov	rsi, rax	#, tmp64
	mov	edi, 1	#,
	movsd	QWORD PTR [rax], xmm0	#,
	call	new_node	#
	test	rax, rax	# tmp
	je	.L57	#,
	add	rsp, 16	#,
	pop	rbx	#
	ret
	.p2align 4,,10
	.p2align 3
.L57:
	mov	rcx, QWORD PTR stderr[rip]	#, stderr
	mov	edx, 25	#,
	mov	esi, 1	#,
	mov	edi, OFFSET FLAT:.LC11	#,
	call	fwrite	#
	mov	rdi, rbx	#, tos
	mov	esi, 1	#,
	call	free_all_nodes	#
	mov	edi, 1	#,
	call	exit	#
.LFE38:
	.size	push, .-push
	.p2align 4,,15
.globl dup
	.type	dup, @function
dup:
.LFB46:
	mov	rax, QWORD PTR [rdi+8]	# <variable>.data, <variable>.data
	movsd	xmm0, QWORD PTR [rax]	#,* <variable>.data
	jmp	push	#
.LFE46:
	.size	dup, .-dup
	.section	.rodata.str1.1
.LC12:
	.string	"%lg"
	.text
	.p2align 4,,15
.globl main
	.type	main, @function
main:
.LFB49:
	push	r15	#
.LCFI21:
	push	r14	#
.LCFI22:
	xor	r14d, r14d	# tos
	push	r13	#
.LCFI23:
	push	r12	#
.LCFI24:
	push	rbp	#
.LCFI25:
	push	rbx	#
.LCFI26:
	sub	rsp, 24	#,
.LCFI27:
	lea	r15, [rsp+16]	# tmp127,
	.p2align 4,,10
	.p2align 3
.L109:
	mov	rdi, QWORD PTR stdin[rip]	#, stdin
	call	_IO_getc	#
	cmp	eax, -1	# c,
	mov	ebx, eax	# c,
	je	.L114	#,
	call	__ctype_b_loc	#
	mov	r13, rax	# D.3162,
	mov	rax, QWORD PTR [rax]	# tmp92,* D.3162
	movsx	rdx, ebx	# c, c
	test	BYTE PTR [rax+1+rdx*2], 8	#,
	je	.L123	#,
.L111:
	mov	rsi, QWORD PTR stdin[rip]	#, stdin
	mov	edi, ebx	#, c
	call	ungetc	#
	mov	rsi, r15	#, tmp127
	mov	edi, OFFSET FLAT:.LC12	#,
	xor	eax, eax	#
	call	scanf	#
	movsd	xmm0, QWORD PTR [rsp+16]	#, d
	mov	rdi, r14	#, tos
	call	push	#
	mov	r14, rax	# tos,
	jmp	.L109	#
	.p2align 4,,10
	.p2align 3
.L123:
	cmp	ebx, 46	# c,
	je	.L111	#,
	cmp	ebx, 43	# c,
	sete	bpl	#, D.3176
	cmp	ebx, 45	# c,
	sete	r12b	#, D.3177
	test	bpl, bpl	# D.3176
	je	.L124	#,
.L103:
	mov	rdi, QWORD PTR stdin[rip]	#, stdin
	call	_IO_getc	#
	cmp	eax, -1	# h,
	mov	ecx, eax	# h,
	je	.L72	#,
	movsx	rdx, eax	# h, h
	mov	rax, QWORD PTR [r13]	# tmp104,* D.3162
	test	BYTE PTR [rax+1+rdx*2], 8	#,
	je	.L125	#,
.L104:
	mov	rsi, QWORD PTR stdin[rip]	#, stdin
	mov	edi, ecx	#, h
	call	ungetc	#
	jmp	.L111	#
	.p2align 4,,10
	.p2align 3
.L124:
	test	r12b, r12b	# D.3177
	jne	.L103	#,
.L64:
	cmp	ebx, 42	# c,
	.p2align 4,,7
	.p2align 3
	je	.L126	#,
	cmp	ebx, 47	# c,
	.p2align 4,,5
	.p2align 3
	je	.L127	#,
	cmp	ebx, 102	# c,
	.p2align 4,,5
	.p2align 3
	je	.L128	#,
	cmp	ebx, 115	# c,
	.p2align 4,,5
	.p2align 3
	je	.L129	#,
	cmp	ebx, 114	# c,
	.p2align 4,,5
	.p2align 3
	je	.L130	#,
	cmp	ebx, 68	# c,
	.p2align 4,,5
	.p2align 3
	je	.L131	#,
	cmp	ebx, 100	# c,
	.p2align 4,,5
	.p2align 3
	je	.L132	#,
	cmp	ebx, 122	# c,
	.p2align 4,,5
	.p2align 3
	je	.L133	#,
	cmp	ebx, 113	# c,
	.p2align 4,,5
	.p2align 3
	jne	.L109	#,
	.p2align 4,,10
	.p2align 3
.L114:
	mov	rdi, r14	#, tos
	mov	esi, 1	#,
	call	free_all_nodes	#
	add	rsp, 24	#,
	xor	eax, eax	#
	pop	rbx	#
	pop	rbp	#
	pop	r12	#
	pop	r13	#
	pop	r14	#
	pop	r15	#
	ret
	.p2align 4,,10
	.p2align 3
.L125:
	cmp	ecx, 46	# h,
	je	.L104	#,
.L72:
	test	bpl, bpl	# D.3176
	jne	.L134	#,
	test	r12b, r12b	# D.3177
	.p2align 4,,5
	.p2align 3
	je	.L64	#,
	test	r14, r14	# tos
	.p2align 4,,5
	.p2align 3
	je	.L77	#,
	mov	rbx, QWORD PTR [r14+16]	# tos.380, <variable>.nxt
	test	rbx, rbx	# tos.380
	.p2align 4,,3
	.p2align 3
	je	.L77	#,
	mov	rax, QWORD PTR [rbx+8]	# D.3637, <variable>.data
	mov	rdi, QWORD PTR [r14+8]	# D.3639, <variable>.data
	movsd	xmm0, QWORD PTR [rax]	# tmp101,* D.3637
	subsd	xmm0, QWORD PTR [rdi]	# tmp101,* D.3639
	jmp	.L112	#
	.p2align 4,,10
	.p2align 3
.L126:
	test	r14, r14	# tos
	je	.L80	#,
	mov	rbx, QWORD PTR [r14+16]	# tos.381, <variable>.nxt
	test	rbx, rbx	# tos.381
	je	.L80	#,
	mov	rax, QWORD PTR [rbx+8]	# D.3673, <variable>.data
	mov	rdi, QWORD PTR [r14+8]	# D.3675, <variable>.data
	movsd	xmm0, QWORD PTR [rax]	# tmp113,* D.3673
	mulsd	xmm0, QWORD PTR [rdi]	# tmp113,* D.3675
.L112:
	movsd	QWORD PTR [rax], xmm0	#* D.3637, tmp101
	call	free	#
	mov	rdi, r14	#, tos
	mov	r14, rbx	# tos, tos.378
	call	free	#
	jmp	.L109	#
	.p2align 4,,10
	.p2align 3
.L127:
	test	r14, r14	# tos
	.p2align 4,,2
	.p2align 3
	je	.L83	#,
	mov	rbx, QWORD PTR [r14+16]	# tos.382, <variable>.nxt
	test	rbx, rbx	# tos.382
	.p2align 4,,5
	.p2align 3
	je	.L83	#,
	mov	rdi, QWORD PTR [r14+8]	# D.3684, <variable>.data
	xorpd	xmm0, xmm0	#
	movsd	xmm1, QWORD PTR [rdi]	# D.3686,* D.3684
	ucomisd	xmm1, xmm0	# D.3686,
	je	.L135	#,
.L110:
	mov	rax, QWORD PTR [rbx+8]	# D.3688, <variable>.data
	movsd	xmm0, QWORD PTR [rax]	# tmp116,* D.3688
	divsd	xmm0, xmm1	# tmp116, D.3686
	movsd	QWORD PTR [rax], xmm0	#* D.3688, tmp116
	call	free	#
	mov	rdi, r14	#, tos
	call	free	#
.L113:
	mov	r14, rbx	# tos, tos.386
	jmp	.L109	#
	.p2align 4,,10
	.p2align 3
.L128:
	test	r14, r14	# tos
	.p2align 4,,2
	.p2align 3
	je	.L109	#,
	mov	rbx, r14	# tos.376, tos
	.p2align 4,,10
	.p2align 3
.L89:
	mov	rax, QWORD PTR [rbx+8]	# <variable>.data, <variable>.data
	mov	esi, OFFSET FLAT:.LC10	#,
	mov	edi, 1	#,
	movsd	xmm0, QWORD PTR [rax]	#,* <variable>.data
	mov	eax, 1	#,
	call	__printf_chk	#
	mov	rbx, QWORD PTR [rbx+16]	# tos.376, <variable>.nxt
	test	rbx, rbx	# tos.376
	jne	.L89	#,
	jmp	.L109	#
	.p2align 4,,10
	.p2align 3
.L129:
	test	r14, r14	# tos
	.p2align 4,,5
	.p2align 3
	je	.L109	#,
	mov	rdi, QWORD PTR [r14+16]	# tos.384, <variable>.nxt
	test	rdi, rdi	# tos.384
	.p2align 4,,5
	.p2align 3
	je	.L136	#,
	mov	rax, QWORD PTR [rdi+16]	# <variable>.nxt, <variable>.nxt
	mov	QWORD PTR [r14+16], rax	# <variable>.nxt, <variable>.nxt
	mov	QWORD PTR [rdi+16], r14	# <variable>.nxt, tos
	mov	r14, rdi	# tos, tos.384
	jmp	.L109	#
	.p2align 4,,10
	.p2align 3
.L130:
	test	r14, r14	# tos
	je	.L109	#,
	mov	rdx, QWORD PTR [r14+16]	# D.3707, <variable>.nxt
	test	rdx, rdx	# D.3707
	je	.L93	#,
	mov	rdi, QWORD PTR [rdx+16]	# tos.385, <variable>.nxt
	test	rdi, rdi	# tos.385
	je	.L93	#,
	mov	rax, QWORD PTR [rdi+16]	# <variable>.nxt, <variable>.nxt
	mov	QWORD PTR [rdx+16], rax	# <variable>.nxt, <variable>.nxt
	mov	QWORD PTR [rdi+16], r14	# <variable>.nxt, tos
	mov	QWORD PTR [r14+16], rdx	# <variable>.nxt, D.3707
	mov	r14, rdi	# tos, tos.385
	jmp	.L109	#
	.p2align 4,,10
	.p2align 3
.L131:
	test	r14, r14	# tos
	je	.L109	#,
	mov	rdi, QWORD PTR [r14+8]	# <variable>.data, <variable>.data
	mov	rbx, QWORD PTR [r14+16]	# tos.386, <variable>.nxt
	call	free	#
	mov	rdi, r14	#, tos
	call	free	#
	jmp	.L113	#
	.p2align 4,,10
	.p2align 3
.L132:
	mov	rax, QWORD PTR [r14+8]	# <variable>.data, <variable>.data
	mov	rdi, r14	#, tos
	movsd	xmm0, QWORD PTR [rax]	#,* <variable>.data
	call	push	#
	mov	r14, rax	# tos,
	jmp	.L109	#
	.p2align 4,,10
	.p2align 3
.L135:
	jp	.L110	#,
	mov	rcx, QWORD PTR stderr[rip]	#, stderr
	mov	edx, 20	#,
	mov	esi, 1	#,
	mov	edi, OFFSET FLAT:.LC6	#,
	mov	rbx, r14	# tos.382, tos
	call	fwrite	#
	jmp	.L113	#
	.p2align 4,,10
	.p2align 3
.L134:
	test	r14, r14	# tos
	je	.L75	#,
	mov	rbx, QWORD PTR [r14+16]	# tos.379, <variable>.nxt
	test	rbx, rbx	# tos.379
	.p2align 4,,5
	.p2align 3
	je	.L75	#,
	mov	rax, QWORD PTR [rbx+8]	# D.3649, <variable>.data
	mov	rdi, QWORD PTR [r14+8]	# D.3651, <variable>.data
	movsd	xmm0, QWORD PTR [rax]	# tmp109,* D.3649
	addsd	xmm0, QWORD PTR [rdi]	# tmp109,* D.3651
	jmp	.L112	#
	.p2align 4,,10
	.p2align 3
.L80:
	mov	rcx, QWORD PTR stderr[rip]	#, stderr
	mov	edx, 23	#,
	mov	esi, 1	#,
	mov	edi, OFFSET FLAT:.LC7	#,
	call	fwrite	#
	jmp	.L109	#
	.p2align 4,,10
	.p2align 3
.L133:
	test	r14, r14	# tos
	je	.L137	#,
	mov	rax, QWORD PTR [r14+8]	# D.3725, <variable>.data
	movsd	xmm0, QWORD PTR [rax]	# tmp123,* D.3725
	xorpd	xmm0, XMMWORD PTR .LC3[rip]	# tmp123,
	movsd	QWORD PTR [rax], xmm0	#* D.3725, tmp123
	jmp	.L109	#
	.p2align 4,,10
	.p2align 3
.L83:
	mov	rcx, QWORD PTR stderr[rip]	#, stderr
	mov	edx, 23	#,
	mov	esi, 1	#,
	mov	edi, OFFSET FLAT:.LC4	#,
	mov	rbx, r14	# tos.382, tos
	call	fwrite	#
	jmp	.L113	#
.L75:
	mov	rcx, QWORD PTR stderr[rip]	#, stderr
	mov	edx, 23	#,
	mov	esi, 1	#,
	mov	edi, OFFSET FLAT:.LC9	#,
	call	fwrite	#
	jmp	.L109	#
.L93:
	mov	rcx, QWORD PTR stderr[rip]	#, stderr
	mov	edx, 23	#,
	mov	esi, 1	#,
	mov	edi, OFFSET FLAT:.LC0	#,
	call	fwrite	#
	jmp	.L109	#
.L77:
	mov	rcx, QWORD PTR stderr[rip]	#, stderr
	mov	edx, 23	#,
	mov	esi, 1	#,
	mov	edi, OFFSET FLAT:.LC8	#,
	call	fwrite	#
	jmp	.L109	#
.L136:
	mov	rcx, QWORD PTR stderr[rip]	#, stderr
	mov	edx, 24	#,
	mov	esi, 1	#,
	mov	edi, OFFSET FLAT:.LC1	#,
	call	fwrite	#
	jmp	.L109	#
.L137:
	mov	rcx, QWORD PTR stderr[rip]	#, stderr
	mov	edx, 23	#,
	mov	esi, 1	#,
	mov	edi, OFFSET FLAT:.LC2	#,
	call	fwrite	#
	jmp	.L109	#
.LFE49:
	.size	main, .-main
	.section	.rodata.cst16,"aM",@progbits,16
	.align 16
.LC3:
	.long	0
	.long	-2147483648
	.long	0
	.long	0
	.section	.rodata.cst8,"aM",@progbits,8
	.align 8
.LC5:
	.long	0
	.long	0
	.section	.eh_frame,"a",@progbits
.Lframe1:
	.long	.LECIE1-.LSCIE1
.LSCIE1:
	.long	0x0
	.byte	0x1
	.string	"zR"
	.uleb128 0x1
	.sleb128 -8
	.byte	0x10
	.uleb128 0x1
	.byte	0x3
	.byte	0xc
	.uleb128 0x7
	.uleb128 0x8
	.byte	0x90
	.uleb128 0x1
	.align 8
.LECIE1:
.LSFDE1:
	.long	.LEFDE1-.LASFDE1
.LASFDE1:
	.long	.LASFDE1-.Lframe1
	.long	.LFB48
	.long	.LFE48-.LFB48
	.uleb128 0x0
	.byte	0x4
	.long	.LCFI0-.LFB48
	.byte	0xe
	.uleb128 0x10
	.byte	0x83
	.uleb128 0x2
	.align 8
.LEFDE1:
.LSFDE3:
	.long	.LEFDE3-.LASFDE3
.LASFDE3:
	.long	.LASFDE3-.Lframe1
	.long	.LFB47
	.long	.LFE47-.LFB47
	.uleb128 0x0
	.byte	0x4
	.long	.LCFI1-.LFB47
	.byte	0xe
	.uleb128 0x10
	.byte	0x83
	.uleb128 0x2
	.align 8
.LEFDE3:
.LSFDE5:
	.long	.LEFDE5-.LASFDE5
.LASFDE5:
	.long	.LASFDE5-.Lframe1
	.long	.LFB43
	.long	.LFE43-.LFB43
	.uleb128 0x0
	.byte	0x4
	.long	.LCFI2-.LFB43
	.byte	0xe
	.uleb128 0x10
	.byte	0x83
	.uleb128 0x2
	.align 8
.LEFDE5:
.LSFDE7:
	.long	.LEFDE7-.LASFDE7
.LASFDE7:
	.long	.LASFDE7-.Lframe1
	.long	.LFB45
	.long	.LFE45-.LFB45
	.uleb128 0x0
	.byte	0x4
	.long	.LCFI5-.LFB45
	.byte	0xe
	.uleb128 0x20
	.byte	0x86
	.uleb128 0x2
	.byte	0x83
	.uleb128 0x3
	.align 8
.LEFDE7:
.LSFDE9:
	.long	.LEFDE9-.LASFDE9
.LASFDE9:
	.long	.LASFDE9-.Lframe1
	.long	.LFB42
	.long	.LFE42-.LFB42
	.uleb128 0x0
	.byte	0x4
	.long	.LCFI8-.LFB42
	.byte	0xe
	.uleb128 0x20
	.byte	0x86
	.uleb128 0x2
	.byte	0x83
	.uleb128 0x3
	.align 8
.LEFDE9:
.LSFDE11:
	.long	.LEFDE11-.LASFDE11
.LASFDE11:
	.long	.LASFDE11-.Lframe1
	.long	.LFB41
	.long	.LFE41-.LFB41
	.uleb128 0x0
	.byte	0x4
	.long	.LCFI11-.LFB41
	.byte	0xe
	.uleb128 0x20
	.byte	0x83
	.uleb128 0x3
	.byte	0x86
	.uleb128 0x2
	.align 8
.LEFDE11:
.LSFDE13:
	.long	.LEFDE13-.LASFDE13
.LASFDE13:
	.long	.LASFDE13-.Lframe1
	.long	.LFB40
	.long	.LFE40-.LFB40
	.uleb128 0x0
	.byte	0x4
	.long	.LCFI14-.LFB40
	.byte	0xe
	.uleb128 0x20
	.byte	0x83
	.uleb128 0x3
	.byte	0x86
	.uleb128 0x2
	.align 8
.LEFDE13:
.LSFDE15:
	.long	.LEFDE15-.LASFDE15
.LASFDE15:
	.long	.LASFDE15-.Lframe1
	.long	.LFB39
	.long	.LFE39-.LFB39
	.uleb128 0x0
	.byte	0x4
	.long	.LCFI17-.LFB39
	.byte	0xe
	.uleb128 0x20
	.byte	0x83
	.uleb128 0x3
	.byte	0x86
	.uleb128 0x2
	.align 8
.LEFDE15:
.LSFDE17:
	.long	.LEFDE17-.LASFDE17
.LASFDE17:
	.long	.LASFDE17-.Lframe1
	.long	.LFB44
	.long	.LFE44-.LFB44
	.uleb128 0x0
	.byte	0x4
	.long	.LCFI18-.LFB44
	.byte	0xe
	.uleb128 0x10
	.byte	0x83
	.uleb128 0x2
	.align 8
.LEFDE17:
.LSFDE19:
	.long	.LEFDE19-.LASFDE19
.LASFDE19:
	.long	.LASFDE19-.Lframe1
	.long	.LFB38
	.long	.LFE38-.LFB38
	.uleb128 0x0
	.byte	0x4
	.long	.LCFI19-.LFB38
	.byte	0xe
	.uleb128 0x10
	.byte	0x83
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI20-.LCFI19
	.byte	0xe
	.uleb128 0x20
	.align 8
.LEFDE19:
.LSFDE21:
	.long	.LEFDE21-.LASFDE21
.LASFDE21:
	.long	.LASFDE21-.Lframe1
	.long	.LFB46
	.long	.LFE46-.LFB46
	.uleb128 0x0
	.align 8
.LEFDE21:
.LSFDE23:
	.long	.LEFDE23-.LASFDE23
.LASFDE23:
	.long	.LASFDE23-.Lframe1
	.long	.LFB49
	.long	.LFE49-.LFB49
	.uleb128 0x0
	.byte	0x4
	.long	.LCFI21-.LFB49
	.byte	0xe
	.uleb128 0x10
	.byte	0x4
	.long	.LCFI22-.LCFI21
	.byte	0xe
	.uleb128 0x18
	.byte	0x8e
	.uleb128 0x3
	.byte	0x8f
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI23-.LCFI22
	.byte	0xe
	.uleb128 0x20
	.byte	0x4
	.long	.LCFI24-.LCFI23
	.byte	0xe
	.uleb128 0x28
	.byte	0x4
	.long	.LCFI25-.LCFI24
	.byte	0xe
	.uleb128 0x30
	.byte	0x4
	.long	.LCFI26-.LCFI25
	.byte	0xe
	.uleb128 0x38
	.byte	0x4
	.long	.LCFI27-.LCFI26
	.byte	0xe
	.uleb128 0x50
	.byte	0x83
	.uleb128 0x7
	.byte	0x86
	.uleb128 0x6
	.byte	0x8c
	.uleb128 0x5
	.byte	0x8d
	.uleb128 0x4
	.align 8
.LEFDE23:
	.ident	"GCC: (Ubuntu 4.3.2-1ubuntu12) 4.3.2"
	.section	.note.GNU-stack,"",@progbits
